{"version":3,"file":"static/js/386.3de42b20.chunk.js","mappings":"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","sources":["pages/MoviesPage/MoviesPage.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams, Link } from \"react-router-dom\";\nimport { fetchMovies } from \"helpers/api\";\n\n\nexport default function MoviesPage() {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [movies, setMovies] = useState([]);\n\n    const [params, setParams] = useSearchParams()\n    const searchedMovie = params.get(\"movie\") ?? \"\";\n\n    useEffect(() => {\n        const getMovie = async () => {\n        setIsLoading(true)\n        try {\n            if (!searchedMovie) {\n                return\n            }\n            const {results} = await fetchMovies(searchedMovie)\n            if (!results) {\n                return\n            }\n            setMovies(results)\n\n        } catch (error) {\n            setError(error)\n            \n        } finally {\n            setIsLoading(false)\n        }};\n\n        getMovie()\n\n    }, [searchedMovie])\n    \n    const location = useLocation();\n\n    \n    const onSearch = (e) => {\n        e.preventDefault()\n        \n        const { value } = e.target.elements.movie; \n        if (value) {\n        setParams({movie: value})\n        }\n    } \n    \n    return (\n        <>\n            <form onSubmit={onSearch}>\n                <input\n                    type=\"text\" autoComplete=\"off\" placeholder=\"Search movie\"\n                    name=\"movie\">\n                </input>\n                <button>Search</button>\n            </form>\n\n            {error && <p>Oops, something went wrong.</p>}\n            {isLoading && <p>Loading...</p>}\n            {movies.length > 0 && !isLoading && (\n            <ul>\n                {movies.length > 0 && (\n                    movies.map(\n                        (movie, index) => {\n                            const { id, original_title, poster_path\n                            } = movie;\n                            const BASE_URL = \"https://image.tmdb.org/t/p/w200\";\n                        const photo = BASE_URL + poster_path;\n\n                            return (\n                                \n                                <li key={index}>\n                                    <Link to={`${id}`} state={{from: location}}>\n                                    {poster_path && (<img src={photo} alt={original_title} />)}\n                                    <h1>{original_title}</h1>\n                                        </Link>\n                                </li>\n                            )\n                        }\n                    )\n                )}\n                    </ul>\n            )}\n\n            {movies.length === 0 && !isLoading && searchedMovie &&<p>Movie \"{searchedMovie}\" not found.</p>}\n            </>\n    )}"],"names":["MoviesPage","_params$get","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","params","setParams","searchedMovie","get","useEffect","getMovie","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchMovies","results","_context","prev","next","abrupt","fetchMovies","sent","t0","finish","stop","apply","arguments","location","useLocation","_jsxs","_Fragment","children","onSubmit","e","preventDefault","value","target","elements","movie","_jsx","type","autoComplete","placeholder","name","length","map","index","id","original_title","poster_path","photo","Link","to","concat","state","from","src","alt"],"sourceRoot":""}